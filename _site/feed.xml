<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C's Notes</title>
    <description>一個追求使用者體驗前端工程師的學習筆記。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 21 Dec 2020 23:59:47 +0800</pubDate>
    <lastBuildDate>Mon, 21 Dec 2020 23:59:47 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Build Custom Hooks</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;h2 id=&quot;what-is-react-hooks&quot;&gt;What is React Hooks?&lt;/h2&gt;

&lt;p&gt;They are functions that let us hooks into &lt;span class=&quot;highlight-text&quot;&gt;React state and lifecycle features&lt;/span&gt; from function components.&lt;/p&gt;

&lt;p&gt;Hooks reduces the complexity of state management. Redux is great for state management, but there are many steps in the process. Rather, hooks can be seen as a singular step. (More on this in a later post~)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why build our own custom hooks?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Building our own hooks lets us extract component logic into reusable functions.&lt;/p&gt;

&lt;p&gt;Sometimes, when we want to share logic between 2 JavaScript functions, we extract it to a third function.&lt;/p&gt;

&lt;p&gt;Since hooks and components are JS function, we can extract them as well.&lt;/p&gt;

&lt;h4 id=&quot;building-custom-hooks&quot;&gt;Building Custom Hooks&lt;/h4&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;A custom Hook is a JavaScript function whose name starts with “use” and that may call other Hooks.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Say we want to to see if our friends are online. But we also want to build a contact list that shows us who is online.&lt;/p&gt;

&lt;p&gt;So we can extract hook logic, and apply the hook into where the application needs the “friend status” logic.&lt;/p&gt;

&lt;p&gt;Here’s our custom hook that shows if a friend is online:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;import { useState, useEffect } from 'react';

function useFriendStatus(friendID) {
  const [isOnline, setIsOnline] = useState(null);

  useEffect(() =&amp;gt; {
    function handleStatusChange(status) {
      setIsOnline(status.isOnline);
    }

    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);
    return () =&amp;gt; {
      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);
    };
  });

  return isOnline;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, say we want both &lt;span class=&quot;highlight-text&quot;&gt;Friend Status&lt;/span&gt; and &lt;span class=&quot;highlight-text&quot;&gt;Contact List&lt;/span&gt; to have the “friend status” logic.&lt;/p&gt;

&lt;p&gt;That would be…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;function FriendStatus(props) {
  const isOnline = useFriendStatus(props.friend.id);

  if (isOnline === null) {
    return 'Loading...';
  }
  return isOnline ? 'Online' : 'Offline';
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and contact list…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;function ContactListItem(props) {
  const isOnline = useFriendStatus(props.friend.id);

  return (
    &amp;lt;li style=&amp;gt;
      {props.friend.name}
    &amp;lt;/li&amp;gt;
  );
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Keep in Mind…&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We must use the prefix “use” in front of our hooks, so it doesn’t get confusing.&lt;/li&gt;
  &lt;li&gt;The states grabbed by hooks are &lt;span class=&quot;highlight-text&quot;&gt;completely isolated&lt;/span&gt; from one another. This means they don’t share the same state.&lt;/li&gt;
  &lt;li&gt;Each &lt;span class=&quot;highlight-text&quot;&gt;call&lt;/span&gt; to a Hook gets isolated state.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 21 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-11/</link>
        <guid isPermaLink="true">http://localhost:4000/react-11/</guid>
        
        <category>React</category>
        
        <category>React Hooks</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>Conditional Rendering</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;h2 id=&quot;conditional-rendering&quot;&gt;Conditional Rendering&lt;/h2&gt;

&lt;p&gt;Conditional Rendering = make things happen with certain conditions&lt;/p&gt;

&lt;p&gt;Common ways in React are…&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If..else statement&lt;/li&gt;
  &lt;li&gt;Element variables&lt;/li&gt;
  &lt;li&gt;Ternary operators&lt;/li&gt;
  &lt;li&gt;Logical &amp;amp;&amp;amp; operators&lt;/li&gt;
  &lt;li&gt;Prevent rendering with null&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ifelse&quot;&gt;If…else&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;if(isLoggedIn) {
  return &amp;lt;button&amp;gt; Logout &amp;lt;/button&amp;gt;
} else {
  return &amp;lt;button&amp;gt; Login &amp;lt;/button&amp;gt;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;element-variables&quot;&gt;Element Variables&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;if(isLoggedIn) {
  Button = &amp;lt;button&amp;gt; Logout &amp;lt;/button&amp;gt;;
} else {
  Button = &amp;lt;button&amp;gt; Login &amp;lt;/button&amp;gt;;
}

return(
  &amp;lt;div&amp;gt;{ Button }&amp;lt;/div&amp;gt;
);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ternary-operators&quot;&gt;Ternary operators&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;div&amp;gt;
  {
    isLoggedIn ? 
      &amp;lt;button&amp;gt; Logout &amp;lt;/button&amp;gt; :
      &amp;lt;button&amp;gt; Login &amp;lt;/button&amp;gt;
  }
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;logical--operators&quot;&gt;Logical &amp;amp;&amp;amp; operators&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;div&amp;gt;
  {
    isLoggedIn &amp;amp;&amp;amp; &amp;lt;button&amp;gt; Logout &amp;lt;/button&amp;gt;
  }
  {
    !isLoggedIn &amp;amp;&amp;amp; &amp;lt;button&amp;gt; Login &amp;lt;/button&amp;gt;
  }
&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;prevent-rendering-with-null&quot;&gt;Prevent rendering with null&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;if(isLoggedIn) {
  return &amp;lt;button&amp;gt; Logout &amp;lt;/button&amp;gt;
} else {
  return null;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 20 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-10/</link>
        <guid isPermaLink="true">http://localhost:4000/react-10/</guid>
        
        <category>React</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>Event Handling</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;h2 id=&quot;handling-events&quot;&gt;Handling Events&lt;/h2&gt;

&lt;p&gt;Events are fired when user interacts with the application.&lt;/p&gt;

&lt;p&gt;Some examples in React are…&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;onclick&lt;/li&gt;
  &lt;li&gt;onchange&lt;/li&gt;
  &lt;li&gt;onfocus&lt;/li&gt;
  &lt;li&gt;onblur&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Handling events in React is very similar to handling events in DOM elements.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;But there are still some differences…&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/study-series/eventDifferences.png&quot; alt=&quot;useEffectHook&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;example-of-event-handling-in-functional-component&quot;&gt;Example of event handling in functional component&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;function FunctionEventHandling() {
  function handleClick(e){
    console.log('I am eating!!');
  }

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;button onClick={handleClick}&amp;gt;Let's Eat!&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But why is it this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;button onClick={handleClick}&amp;gt;Let's Eat!&amp;lt;/button&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and not this?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;button onClick={handleClick()}&amp;gt;Let's Eat!&amp;lt;/button&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Bc the event handling function should NOT be called with ().&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;It we call the handler with (), the function will be executed &lt;strong&gt;before&lt;/strong&gt; the button is clicked!!&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Event handler is a function not a function call!&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;example-of-event-handling-in-class-component&quot;&gt;Example of event handling in class component&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class EatingToggle extends React.Component {
  constructor(props){
    super(props);
    this.state = {
      isEating: true
    };

    this.handleClick = this.handleClick.bind(this);
  }

  handleClick(){
    this.setState( state =&amp;gt; {
      isEating: !state.isEating
    })
  }

  render(){
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;button onClick={this.handleClick}&amp;gt;
          {this.state.isEating ? 'I am eating lah!' : 'Nope, not eating'}
          &amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 20 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-09/</link>
        <guid isPermaLink="true">http://localhost:4000/react-09/</guid>
        
        <category>React</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>useEffect Hooks</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;h2 id=&quot;useeffect-hooks&quot;&gt;useEffect Hooks&lt;/h2&gt;

&lt;p&gt;Use this Hook to tell React what to do when the component needs to perform a task after rendering.&lt;/p&gt;

&lt;p&gt;Sample:
&lt;img src=&quot;/assets/images/study-series/useEffectHook.jpg&quot; alt=&quot;useEffectHook&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;This side effect will execute on every render including when the component has mounted and every time it updates.&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;lets-use-fetch-user-from-an-api-as-an-example&quot;&gt;Let’s use fetch user from an API as an example…&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;componentDidMount()&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;useEffect(() =&amp;gt; {
  // componentDidMount code goes here

  fetchUserApi(id).then((user) =&amp;gt; {
     setUser(user)
  })

}, []);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;^Bc we passed an empty array as the second parameter, the useEffect hook will only execute once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;componentDidUpdate(prevProps)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;useEffect(() =&amp;gt; {
  // ComponentDidUpdate code goes here
  
  fetchUserApi(id).then((user) =&amp;gt; {
     setUser(user)
  })
}, [id]);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;^This effect will execute only once, when component is &lt;strong&gt;updated&lt;strong&gt; (includes re-rendering).&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;componentWillUnmount()&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;useEffect(() =&amp;gt; {
  return() =&amp;gt; {
    // componentWillUnmount code goes here
    setUser(null)
  }
}, []);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;All Three Combined&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;useEffect(() =&amp;gt; {

  fetchUserApi(id).then((user) =&amp;gt; {
     setUser(user)
  })

  return() =&amp;gt; {
    setUser(null)
  }
}, [id]);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 19 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-08/</link>
        <guid isPermaLink="true">http://localhost:4000/react-08/</guid>
        
        <category>React</category>
        
        <category>React Hooks</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>Component Lifecycle</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;現在一大部分已被 useEffect Hook 取代，但是還是很有學習價值。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;component-lifecycle&quot;&gt;Component Lifecycle&lt;/h2&gt;

&lt;p&gt;In each component, React has a lifecycle which you can monitor and manipulate during its 3 main phases.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/study-series/threephases.png&quot; alt=&quot;threephases&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;componentwillmount&quot;&gt;ComponentWillMount()&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Called &lt;strong&gt;once&lt;/strong&gt; in its component’s lifecycle&lt;/li&gt;
  &lt;li&gt;Called &lt;strong&gt;before&lt;/strong&gt; component render()&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;highlight-text&quot;&gt;Avoid any asynchronous behavior in this method&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;highlight-text&quot;&gt;setState won’t cause a re-render&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;componentdidmount&quot;&gt;ComponentDidMount()&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Called &lt;strong&gt;after&lt;/strong&gt; component render() once&lt;/li&gt;
  &lt;li&gt;Async function can be called here&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;highlight-text&quot;&gt;Call setState here for re-render&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;componentwillunmount&quot;&gt;ComponentWillUnmount()&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Called &lt;strong&gt;right before&lt;/strong&gt; component is removed from the DOM&lt;/li&gt;
  &lt;li&gt;Performs cleanups here. (i.e. cancel network call)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;componentwillupdate&quot;&gt;ComponentWillUpdate()&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Lets you manipulate component just before receiving new state/props.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;componentdidupdate&quot;&gt;ComponentDidUpdate()&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Called &lt;strong&gt;after&lt;/strong&gt; any rendered HTML has finished loading.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 19 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-07/</link>
        <guid isPermaLink="true">http://localhost:4000/react-07/</guid>
        
        <category>React</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>State</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;h2 id=&quot;state&quot;&gt;State&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;What is State&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Object that holds information that might change over the lifetime of the component.&lt;/p&gt;

&lt;p&gt;Used to track data from form input, dynamic data and API.&lt;/p&gt;

&lt;p&gt;Example - Local State:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assignment:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Welcome extends React.component {
  constructor(props){
    super(props);
    this.state = {
      name: 'Boop';
    }
  }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;We assign the initial state in the &lt;strong&gt;constructor&lt;/strong&gt;.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reading State:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;console.log(this.state.name);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Updating State:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// wrong
this.state.name = 'Foo';

// correct
this.setState({name: 'Foo'});
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;We need to &lt;strong&gt;replace&lt;/strong&gt; the entire state object.&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;updating-state&quot;&gt;Updating State&lt;/h4&gt;

&lt;p&gt;State updates may be asynchronous and are merged.&lt;/p&gt;

&lt;p&gt;Take a look:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;this.state = {
  count: 0;
}

this.setState({count: count + 1}); // count: 1
this.setState({count: count + 1}); // count: 1
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It should give you 2 right?
&lt;strong&gt;No&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Both the setState count here is enqueued when its value is 0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what do we do if we want to access previous state?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We pass a function in setState that takes the previous state and updates it in a synchronous manner.&lt;/p&gt;

&lt;p&gt;Like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;this.state = {
  count: 0;
}

this.setState(
  (prevState) =&amp;gt; {
    return {
      count: prevState.count + 1
    }
  }
);

// count: 1

this.setState(
  (prevState) =&amp;gt; {
    return {
      count: prevState.count + 1
    }
  }
);

// count: 2
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;usestate-hooks-react-168&quot;&gt;useState Hooks (React 16.8)&lt;/h4&gt;
&lt;p&gt;**To be further discussed in details in a separate post&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/study-series/useStateFn.jpg&quot; alt=&quot;useStateHooksFn&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Example code with functional component:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;import React, { useState } from 'react';

export default function Welcome () {
  const [count, useCount] = useState(0);

  return (
    &amp;lt;div&amp;gt;
      Counter: { count } &amp;lt;br /&amp;gt;
      &amp;lt;button onClick={()=&amp;gt; useCount( count + 1 )}&amp;gt;
      Add Count&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;
&lt;span class=&quot;highlight-text&quot;&gt;Hooks aren’t supported in class comp.&lt;/span&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-06/</link>
        <guid isPermaLink="true">http://localhost:4000/react-06/</guid>
        
        <category>React</category>
        
        <category>React Hooks</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>Functional Components vs Class Components</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;h2 id=&quot;about-components&quot;&gt;About Components&lt;/h2&gt;

&lt;p&gt;Core building blocks of React.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Multiple individual components forms a parent component.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2 types of components in React:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Functional&lt;/li&gt;
  &lt;li&gt;Class&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Before React Hooks were introduced, functional components were generally used for style (aka the dumb/stateless/presentational component) and class components were used for logic (smart component/stateful/container components). This practice has since been deprecated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;functional-components&quot;&gt;Functional Components&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;After React Hooks are introduced, functional components are used to store state using react hooks.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Like the name implies, think of functional component as a function.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;function Welcome(props) {
return &amp;lt;h1&amp;gt;Hello, {props.name} &amp;lt;/h1&amp;gt;;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;const element = &amp;lt;Welcome name=&quot;Boop&quot; /&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/study-series/fn.jpg&quot; alt=&quot;functionalComp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Props should never be modified!&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;when-should-you-use-functional-components&quot;&gt;When should you use functional components?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;For React &amp;lt; 16.8…&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When your comp. simply receive props, doesn’t have a state and renders smth (dumb/stateless/presentational comp.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;For React &amp;gt; 16.8… (React Hooks were introduced)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Func. comp. can now have its own state via React Hooks&lt;/li&gt;
  &lt;li&gt;Preferred over class comp. bc of React Hooks now.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;class-components&quot;&gt;Class Components&lt;/h2&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Class components were preferred before React Hooks were introduced.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Basically ES6 classes.&lt;/p&gt;

&lt;p&gt;Similar to functional component, class comp. optionally receives props as input and renders JSX.&lt;/p&gt;

&lt;p&gt;Class comp. can also maintain private internal state of a particular comp.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Welcome extends React.Component {
  render(){
    return &amp;lt;h1&amp;gt;Hello, {this.props.name} &amp;lt;/h1&amp;gt;;
  }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Comp. should always start with capital letter.&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;highlight-text&quot;&gt;Again, props should never be modified!&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;drawbacks&quot;&gt;Drawbacks&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Class comp. is slower than fun. comp in terms of performance. This difference increases as the number of comp in the app increases.&lt;/li&gt;
  &lt;li&gt;Slightly inefficient to use bc it requires more coding.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 18 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-05/</link>
        <guid isPermaLink="true">http://localhost:4000/react-05/</guid>
        
        <category>React</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>Virtual DOM &amp; DOM Manipulation</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;h2 id=&quot;virtual-dom&quot;&gt;Virtual DOM&lt;/h2&gt;

&lt;p&gt;React creates a tree of custom objects, each representing a part of the DOM.&lt;/p&gt;

&lt;p&gt;If we create a &lt;span class=&quot;highlight-text&quot;&gt;p&lt;/span&gt; element inside a &lt;span class=&quot;highlight-text&quot;&gt;div&lt;/span&gt;, React will create React.div object and React.p object.&lt;/p&gt;

&lt;p&gt;React will then modify these objects quickly when needed &lt;span class=&quot;highlight-text&quot;&gt;(modifying only what’s required)&lt;/span&gt; rather than changing the real DOM.&lt;/p&gt;

&lt;p&gt;Before it renders the component, React will determine what needs to be changed using the virtual DOM. Then React will get virtual DOM and real DOM in sync.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Virtual DOM = blueprint&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Virtual DOM contains the required details needed to construct the DOM. But it doesn’t require all the heavy parts of the real DOM. Thus, making virtual DOM creation much faster than actual DOM.&lt;/p&gt;

&lt;h2 id=&quot;dom-manipulation&quot;&gt;DOM Manipulation&lt;/h2&gt;

&lt;p&gt;DOM Manipulation = dynamically changing the content of web page.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Reconciliation&lt;/span&gt; = changes made to the virtual DOM and then sync to the real DOM.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Diffing&lt;/span&gt; = process when React figures out which objects has been changed&lt;/p&gt;

&lt;h4 id=&quot;process&quot;&gt;Process&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;React updates virtual DOM&lt;/li&gt;
  &lt;li&gt;States of virtual DOM will be compared (previous + updated), to identify what has been changed. This is done via &lt;span class=&quot;highlight-text&quot;&gt;Diffing Algorithm&lt;/span&gt;.&lt;/li&gt;
  &lt;li&gt;Changed objects will get updated to the real DOM&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;example-of-diffing-algorithm&quot;&gt;Example of Diffing Algorithm&lt;/h4&gt;

&lt;p&gt;When &lt;strong&gt;root&lt;/strong&gt; is changed, React will delete the tree and rebuild the entire tree.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// old
&amp;lt;div&amp;gt;&amp;lt;App /&amp;gt;&amp;lt;/div&amp;gt;

// new
&amp;lt;span&amp;gt;&amp;lt;App /&amp;gt;&amp;lt;/span&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When &lt;strong&gt;attribute&lt;/strong&gt; is changed, React will only change the attribute.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// old
&amp;lt;div id=&quot;root&quot;&amp;gt;&amp;lt;/div&amp;gt;

// new
&amp;lt;div id=&quot;boop&quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When &lt;strong&gt;new child element&lt;/strong&gt; is added at the end of a list, React will simply add it to the list.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// old
&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;hi&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;hi1&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

// new
&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;hi&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;hi1&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;hi2&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 18 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-04/</link>
        <guid isPermaLink="true">http://localhost:4000/react-04/</guid>
        
        <category>React</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>JSX</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;h2 id=&quot;jsx&quot;&gt;JSX&lt;/h2&gt;

&lt;p&gt;JSX = JavaScript Syntax Extension&lt;/p&gt;

&lt;p&gt;Lets XML/HTML + JavaScript/React code coexist.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;const name = 'Boop';
const element = '&amp;lt;div&amp;gt;Hello, {name}&amp;lt;/div&amp;gt;';


ReactDOM.render(element, document.getElementById('root'));
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the variable &lt;strong&gt;name&lt;/strong&gt; is wrapped in JSX.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;These code are then converted into standard JavaScript objects that can be parsed by the JS Engine.&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;why-jsx&quot;&gt;Why JSX?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Much faster than normal JS, as JSX optimizes when it’s converted into regular JS.&lt;/li&gt;
  &lt;li&gt;Easy to create template.&lt;/li&gt;
  &lt;li&gt;React Component lets us keep both markup and logic together in one file using JSX.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;attributes-in-jsx&quot;&gt;Attributes in JSX&lt;/h4&gt;

&lt;p&gt;React DOM uses camelCase.&lt;/p&gt;

&lt;p&gt;For example, class becomes className…&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let button = &amp;lt;button className=&quot;btn-primary&quot;&amp;gt;Button&amp;lt;/button&amp;gt;;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 18 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-03/</link>
        <guid isPermaLink="true">http://localhost:4000/react-03/</guid>
        
        <category>React</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>ES6</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;h2 id=&quot;es6-for-react&quot;&gt;ES6 for React&lt;/h2&gt;

&lt;p&gt;JavaScript = a “dialect” of ECMAScript&lt;/p&gt;

&lt;p&gt;ES6 = ECMAScript 2015 = JavaScript standard.&lt;/p&gt;

&lt;p&gt;React uses ES6. ES6 is also getting popularity for writing server applications and services via Node.js.&lt;/p&gt;

&lt;h4 id=&quot;variables&quot;&gt;Variables&lt;/h4&gt;

&lt;p&gt;In ES6, variables are declared using &lt;span class=&quot;highlight-text&quot;&gt;const, let and var&lt;/span&gt; keywords.&lt;/p&gt;

&lt;p&gt;We cannot redeclare &lt;strong&gt;const&lt;/strong&gt; or &lt;strong&gt;let&lt;/strong&gt; variables.&lt;/p&gt;

&lt;p&gt;And, we can only reassign &lt;strong&gt;let&lt;/strong&gt; variable.&lt;/p&gt;

&lt;h4 id=&quot;block-scope-vs-function-scope&quot;&gt;Block Scope vs Function Scope&lt;/h4&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;var&lt;/span&gt; is function scoped. It can be accessed everywhere.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;let&lt;/span&gt; is a block scoped. It can only be accessed inside the block where it is defined.&lt;/p&gt;

&lt;h4 id=&quot;new-update-arrow-function--regular-function&quot;&gt;New Update: Arrow Function &amp;amp; Regular Function&lt;/h4&gt;

&lt;p&gt;Regular Function&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;var hello = function(name) { 
  return name
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ES6 Arrow function&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let hello = (name) =&amp;gt; { return name }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even more ways to define arrow functions…&lt;/p&gt;

&lt;p&gt;We can omit {}, if there’s only one expression&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let hello = (num1, num2) =&amp;gt; num1 + num2;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can omit (), if there’s only one argument&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let hello = name =&amp;gt; name;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can use _, if there’s no argument&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let hello = _ =&amp;gt; 1 + 2;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;this-keyword&quot;&gt;this keyword&lt;/h4&gt;

&lt;p&gt;In regular function, the &lt;strong&gt;this&lt;/strong&gt; keyword represents the object called inside a function.&lt;/p&gt;

&lt;p&gt;In arrow function, the &lt;strong&gt;this&lt;/strong&gt; keyword represents the object that defined the function, which is the window. object.&lt;/p&gt;

&lt;h4 id=&quot;template-literals&quot;&gt;Template Literals&lt;/h4&gt;

&lt;p&gt;Quoted between ``, string literals that can include expressions. Like this…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let name = 'Boop';
let greeting = `Hello, ${name}`;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;destructuring-arrays&quot;&gt;Destructuring: Arrays&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let array = [1,2,3,4,5];
let [value1,value2,value3] = array;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;this is equivalent to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let array = [1,2,3,4,5];
let value1 = array[0];
let value2 = array[1];
let value3 = array[2];
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;destructuring-objects&quot;&gt;Destructuring: Objects&lt;/h4&gt;

&lt;p&gt;Similar to destructuring array…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let obj = {
  key1: 'boop',
  key2: 'foo',
  key3: 'bar'
};
let [key1,key2,key3] = obj;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;spread-operator&quot;&gt;Spread Operator&lt;/h4&gt;

&lt;p&gt;The spread operator spreads the values in an iterable, such as array &amp;amp; strings, across arguments or elements.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let fruits = ['apples','bananas','strawberry'];
let veggies = ['cabbage','asparagus','green onions'];

let grocery = [...fruits,...veggies];
console.log(grocery);
// ['apples','bananas','strawberry','cabbage','asparagus','green onions']
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spread operator can also be used to clone an array &amp;amp; objects in an arrow function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;const dog1 = {
  name: 'Boop',
  breed: 'Corgi'
}

const dog2 = {...dog1}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rest-parameter&quot;&gt;Rest Parameter&lt;/h4&gt;

&lt;p&gt;This is used to pass an arbitrary number of argument, and to process these args within the arrow function.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Rest parameters are array instances.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;We use rest parameters if we need extra parameters other than the specified ones.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let foo = function(a, b, ...args) {
  console.log(args);
}

foo(1,2); // [], nothing will print inside the array, because we don't have extra parameters

foo(1,2,3,4,5) // [3,4,5]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Difference between rest parameter and normal arguments&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Rest parameters returns an &lt;span class=&quot;highlight-text&quot;&gt;array&lt;/span&gt; by default, so methods like &lt;strong&gt;map, sort, shift, forEach…&lt;/strong&gt; can be used directly. But for normal args, they need to be converted into an array because normal args are &lt;span class=&quot;highlight-text&quot;&gt;objects&lt;/span&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-02/</link>
        <guid isPermaLink="true">http://localhost:4000/react-02/</guid>
        
        <category>React</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
  </channel>
</rss>
