<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C's Notes</title>
    <description>一個追求使用者體驗前端工程師的學習筆記。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 06 Jan 2021 03:00:14 +0800</pubDate>
    <lastBuildDate>Wed, 06 Jan 2021 03:00:14 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Bidirectional data flow in React</title>
        <description>&lt;p&gt;短篇 React 學習筆記: 使用 React Hooks 讓 React 能像 Angular 一樣做出 two-way data flow 的效果。&lt;/p&gt;

&lt;p&gt;coming soon！&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jan 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-12/</link>
        <guid isPermaLink="true">http://localhost:4000/react-12/</guid>
        
        <category>React</category>
        
        <category>React Hooks</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>React 跟 Angular 的框架分析 — Part 3: 兩個框架的優缺點</title>
        <description>&lt;p&gt;歡迎再度回到&lt;strong&gt;小孩子才做選擇，我兩個都要！React 跟 Angular 的框架分析系列！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;這篇分析會切成以下四個部分，你現在在這裡：&lt;/p&gt;

&lt;ol class=&quot;pl-4&quot;&gt;
&lt;li&gt;Angular 跟 React 的快速背景&lt;/li&gt;
&lt;li&gt;快速帶過近幾年兩個框架的發展 trends （更詳細的 trends 分析會另外開一篇）&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;highlight-text&quot;&gt;&lt;strong&gt;兩個框架的優缺點，每提一點，會附上實作 comparison&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;下集預告：配合後端 + 串起 API 後，誰勝出&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;準備好的話，我們就開始囉~&lt;/p&gt;

&lt;h2 id=&quot;框架優缺點&quot;&gt;框架優缺點&lt;/h2&gt;

&lt;p&gt;如果可以拿食物來形容兩個框架的話，React 是單點套餐，可以一直加不同的配餐，而 Angular 就是全家桶一次給你、給你、都給你。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一切取決於你想要什麼東西。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;但是，嘰裡呱啦講了那麼多，我們怎麼知道誰比較好？&lt;/p&gt;

&lt;p&gt;簡單，&lt;strong&gt;寫出來就知道了！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接來下，我們拿 Todo List 當例子，把這個範例用 &lt;strong&gt;Angular 跟 React 各寫一次&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;並在寫 code 時分析並提出兩個框架的優劣處。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;框架結構&quot;&gt;框架結構&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;首先我們來理解一下 Angular 的結構&lt;/strong&gt;
Angular 是採 MVC 方式，也就是說一個 component 上面，你會有 4 個檔案：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;：component 邏輯&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;css/scss&lt;/strong&gt;: 如名 style 檔案&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;HTML&lt;/strong&gt;: 呈現的網頁&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;spec.ts&lt;/strong&gt;: 測試檔&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 TypeScript 檔案裡面寫好你的 class，html 顯示你的 template，scss 呈現 style，最後用 spec 來測試。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;而 React 在資料結構上，就乾淨簡潔的許多&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果採用 JSX 的話， React 就&lt;strong&gt;只有一個 JSX 檔&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;而我們之前提過 React 採取了 Virtual DOM 的方式，用 JSX 寫法的話，我們可以選擇要寫 class component 或是 functional component。&lt;/p&gt;

&lt;p&gt;近幾年，因為 React Hooks 的崛起，functional 開始被重用，而 loading 的速度也更快了。&lt;/p&gt;

&lt;p&gt;要測試 React 的話，跟 Angular 一樣 React 需要額外寫測試檔，但不一定每個 component 都要單獨寫一個！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React 個人小偏好&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在 React 的資料夾結構上，我個人偏好是這樣：&lt;/p&gt;

&lt;p&gt;components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Book
    &lt;ul&gt;
      &lt;li&gt;index.js&lt;/li&gt;
      &lt;li&gt;Book.jsx&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;把寫好的 component 分裝進一個專屬的資料夾，裡面有 index.js 跟 component 的 jsx 檔案。&lt;/p&gt;

&lt;p&gt;在將 index.js 輸出 component，方便其他頁面讀取。&lt;/p&gt;

&lt;p&gt;看完了結構，我們來聊聊撰寫時的便利度！&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;接下來的部分重寫中，上次舉的例子沒有特別好，所以還請各位客官見諒，他很快就會被補回來的！&lt;/span&gt;&lt;/p&gt;

&lt;!-- ## 框架撰寫便利度

首先，我們用 Todo List 來說，並拿最簡單的 if conditions 說起。

我的 Todo Item 需要一個判斷，顯示用戶已完成/待辦的事項，並給兩個狀態不同的 styles。

假設我們的 style 都已經寫好了 (這邊就不提 styles 的檔案)...


**Angular 寫法**

首先，我會用 @Input() 將 parent component 的東西傳下來（這個我們等等細講）

再來，我會在 ts 檔案裡面寫出我從 parent component 拿到的判斷 boolean。

最後，我會用 Angular 本身創建的 attribute directive 直接寫不同狀態的判斷。


Component 的 TS 檔案：
```typescript
// 以上 import files + 結構什麼的都省略

export class ToDoItemComponent implements OnInit {

  @Input() toDoName: string;
  @Input() isDone: boolean;

  constructor() { }

  ngOnInit(): void {
  }

}

```

Component 的 HTML 檔案：
```htmlmixed=
&lt;div class=&quot;todo-item&quot;&gt;
  &lt;span 
      [ngClass]=&quot;{
      'done': isDone === true,
      'none': isDone === false
      }&quot;&gt;
    
  &lt;/span&gt;
&lt;/div&gt;
```

**React 的話，我會是這樣寫**

首先，我要先有個叫做 done 的 state，這個 state，我可以用 redux 或 hooks 寫。

我會用 props 直接將 parent component 的東西傳下來，取得的方法有很多，好比 lifting the state up 之後再拿、用 Redux 直接抓、又或者用 Hooks 寫好後裝進來。

（這些 state 跟 parent component 我們等等再細講）


JSX 檔案：

```jsx
// 以上 import files + 結構什麼的都省略

const ToDoItem = (props: TodoProps) =&gt; {
    return(
    &lt;div className={style.todoItem}&gt;
      &lt;span
        style=&gt;
        { props.todo.name }
      &lt;/span&gt;
    &lt;/div&gt;
    )
}

export default ToDoItem;
```

這樣就寫好一個 Todo Item 了，我們再把它裝進 parent component 裡面。

我們來看看兩個框架 for loops 的呈現寫法。


**Angular寫法**

Angular 的話，我們絕對會用內建的 structural directive，也就是我們的 ***ngFor**。

我們現在 TS 檔案裡面導入並取得我們的 todo 清單，把他裝進 todoItems 這個 array 裡面。

（我們當然可以用 TypeScript 寫的更詳細，不過怕講不完，我們先這樣。）

然後，Angular 的好處來了，我們在 app.module.ts 裡面將 components 導入進去後，這個 component 就哪邊都可以用了。

意思就是說，我們可以直接把剛剛寫好的 todo item 的 component 丟進來，並裝入這個 parent component 的資料。

```htmlmixed=
&lt;div *ngFor=&quot;let todoItem of todoItems&quot; class=&quot;todo-item-list&quot;&gt;
  &lt;app-todo-item
      [toDoName]='todoItem.name'
      [isDone]='todoItem.isDone'
  &gt;&lt;/app-todo-item&gt;
&lt;/div&gt;
```

那 React 呢？

**React**

React 的話比較講求深度的 JS 掌握度，很多東西都得自己寫，而我們的 To Do Item 的大清單，也得自己來，我們用 array 的內建 method, map 來寫~

```jsx
// 省略 import files

const ToDoList = () =&gt; {
    const todoList = todoList(); // 這是個拿取資料的 hook，我們之後會寫到

    return(
      &lt;div className={styles.todoItemList}&gt;
       {
         todoList.todos.map( todo =&gt; (
           &lt;TodoItem
             key={todo.id}
             todo={todo}
           /&gt;
         ))
       }
      &lt;/div&gt;
    );
};
```




parent to child comp.

**[Angular 寫法]**
@input &amp; services

**[REAct 寫法]**
lifting the state up
redux
hooks







[個人小結/偏好 ]


## 框架靈活度

**[Angular 寫一遍]**
[Angular 可能寫法]
[Angular built in structural directive]

**[React 寫一遍]**
[React 可能寫法 2 （跟上一段寫不太一樣，展現 React 的靈活度）]

[個人小結/偏好: React 靈活雙刃劍 + 整齊度 + 組織結構 ]


## 框架效能

**[Angular 寫一遍]**
[Angular 可能寫法]

Angular 寫法
React.memo 寫法

**[React 寫一遍]**
[React 可能寫法]

**[為什麼 React 會比較快 V DOM: 實際數字 &amp; 圖片證據 ]**

[個人小結/偏好 ]


## 框架 Community

繼續延伸我們的 To Do List~

如果我們要加額外功能的話，會發生什麼事...

**[Angular 寫一遍]**
[Angular 可能寫法 1: Angular 大禮包，你想要的都可以擁有]
[Angular 可能寫法 2: Angular 大禮包，你想要的都可以擁有，plugin]

**[React 寫一遍]**
[React 可能寫法: 瘦子需要吃更多，你有的我也可以擁有，裝插件]


[個人小結/偏好 ]


## 個人觀察總結

其實幾年前看過的搞笑說法是：**Angular 太胖了，而 React 要學的東西太多了。**

為什麼會這麼說？

我們來思考一下，一開始寫寫寫的時候，我們會覺得 React 真好上手，很快就可以把項目寫完了（而我本人再次碰到 React 時，更是歡樂的不睡覺，一寫就是到天亮。）

可是，我們要 State 啊！那我就來把 Redux 弄進去好了，但是考慮到效能，Redux 好像有點胖，我們用 Mobx 怎麼樣？

裝好 Mobx後... 哦，對了 React 社群比較喜歡 Flow，我們再改改，可是我們也要考慮到除蟲蟲，就來個 TypeScript 吧！

導入 TypeScript後，Async 怎麼辦？ 我們需要 RxJS，這個要進去！

RxJS好了... React Hooks 出來了，我好累啊...

...

等等，這些東西不就是 Angular Service + RxJS + TypeScript 解決的嘛？

**~~恭喜你獲得 Angular 全家桶的鄙視。~~**

當然這些都是之前的笑話，因為 Hooks 來了！

輕快的 Hooks 可以取代 LifeCycle 跟 Redux！

讓我們寫 React 起來更開心~


### 個人對 Angular 的看法

**它真的就是個全家桶。**

適合什麼案子使用...[more goes here later]


### 個人對 React 的看法

是個輕快又有龐大支柱的萬能

覺得它適合什麼案子使用...[more goes here]


[總結之前每個小段提到的偏好 ]
[完整總結全部 ]




#### 下集預告：如果我們配合了後端...

兩個前端框架優劣分析的差不多了，那如果加入跟後端配合的因素呢？

誰還會佔上風？誰會比較好上手？誰比較靈活？

又是誰可以碾壓全場咧？ --&gt;
</description>
        <pubDate>Thu, 31 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-vs-angular-part-3/</link>
        <guid isPermaLink="true">http://localhost:4000/react-vs-angular-part-3/</guid>
        
        <category>Angular 9</category>
        
        <category>React</category>
        
        <category>analysis</category>
        
        <category>observation</category>
        
        
        <category>Angular</category>
        
        <category>React</category>
        
        <category>front-end my love</category>
        
        <category>observation</category>
        
        <category>analysis notes</category>
        
        <category>trends</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>React 跟 Angular 的框架分析 — Part 2: 框架趨勢</title>
        <description>&lt;p&gt;歡迎回到&lt;strong&gt;小孩子才做選擇，我兩個都要！React 跟 Angular 的框架分析系列！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;這篇分析會切成以下四個部分，你現在在這裡：&lt;/p&gt;

&lt;ol class=&quot;pl-4&quot;&gt;
&lt;li&gt;Angular 跟 React 的快速背景&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;highlight-text&quot;&gt;&lt;strong&gt;快速帶過近幾年兩個框架的發展 trends （更詳細的 trends 分析會另外開一篇）&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;兩個框架的優缺點，每提一點，會附上實作 comparison&lt;/li&gt;
&lt;li&gt;下集預告：配合後端 + 串起 API 後，誰勝出&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;準備好的話，我們就開始囉~&lt;/p&gt;

&lt;h2 id=&quot;框架趨勢&quot;&gt;框架趨勢&lt;/h2&gt;

&lt;h3 id=&quot;崛起的-react&quot;&gt;崛起的 React&lt;/h3&gt;

&lt;p&gt;雖然 React 在 2013 正式發佈，但是根據各大網站分析 React 還是壟斷了市場。&lt;/p&gt;

&lt;p&gt;我們來看一些 React vs Angular 的數據圖：&lt;/p&gt;

&lt;p&gt;每年的下載數據：
&lt;img src=&quot;https://i.imgur.com/irbL5jy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;過去兩年的下載數據 (2018-2020, NPMTrends.com)：
&lt;img src=&quot;https://i.imgur.com/64x8ffn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;過去 5 年，在 Google Trends 上大家都在搜尋的框架 (2015-2020)：
&lt;img src=&quot;https://i.imgur.com/UgVSygv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這三張數據圖，都可以看到 React 已經稱霸前端框架了。&lt;/p&gt;

&lt;p&gt;可是 Angular 不是比 React 早出來嗎？這是怎麼一回事？&lt;/p&gt;

&lt;p&gt;這裡我們要講到 Angular 的一段小歷史。&lt;/p&gt;

&lt;h3 id=&quot;哭泣的-angular&quot;&gt;哭泣的 Angular&lt;/h3&gt;

&lt;p&gt;上一篇有提到，其實大家很容易搞混 AngularJS 跟 Angular 2+。&lt;/p&gt;

&lt;p&gt;我們來回顧下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AngularJS&lt;/strong&gt; = 2010 年就推出的舊框架，明年即將被 Google 冷藏，不再支援。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular 2+&lt;/strong&gt; （又或是我們在市場常看的 Angular 7, Angular 8… Angular 11 等） = &lt;strong&gt;2016&lt;/strong&gt; 年才推出的框架，是 AngularJS 的&lt;strong&gt;升級版&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;功能比 AngularJS 強大，但是還是很多人容易誤會，以為 Angular 2 = AngularJS。&lt;/p&gt;

&lt;p&gt;也可以說 Angular 2+ 無辜被前輩 AngularJS 陷害，讓大家以為他還是很難用。&lt;/p&gt;

&lt;p&gt;另外，我們現在 2020 年，公司一般如果提到 Angular，其實都是在說 &lt;strong&gt;Angular 2+&lt;/strong&gt;，基本上已經沒有人在用 AngularJS 了。&lt;/p&gt;

&lt;p&gt;但還是有很多人不明白，以為市場上說的 Angular 是 AngularJS。&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;而在這篇文章裡，我如果提到 Angular，就是在說 Angular 2+。&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;更新速度&quot;&gt;更新速度&lt;/h3&gt;

&lt;p&gt;講完了兩個框架的趨勢已經釐清了小誤會，我們來聊一下框架版本的更新速度。&lt;/p&gt;

&lt;p&gt;拿 Angular 來講，Angular 的官網表示每半年就會出一個 major release，每個 major release 都會被 Angular 支援 18 個月（半年 active support，一年 LTS）。&lt;/p&gt;

&lt;p&gt;換句話說就是 &lt;strong&gt;Angular 工程師們有差不多半年的時間可以快速學習該版本的更新&lt;/strong&gt;，學完後就要繼續迎接更新版本的 updates。&lt;/p&gt;

&lt;p&gt;而 React 每個版本差不多是&lt;strong&gt;一年大更新一次&lt;/strong&gt;，近幾年來最重大的是 React 16.8，帶來了 React 未來的趨勢– Hooks! (這個我們接下來再細聊)&lt;/p&gt;

&lt;p&gt;那我們再來看看 StackOverflow 上面的數據：&lt;/p&gt;

&lt;p&gt;2020 年 StackOverflow 上，工程師最愛框架統計問卷:
&lt;img src=&quot;https://i.imgur.com/jPVI0VA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我們一比之下，React 佔了快 7 成的前端市場，緊追在後的是近幾年崛起的 Vue.js（這個有機會我們再聊）。&lt;/p&gt;

&lt;p&gt;而我們的 Angular ，雖然近幾年在前端沒有比 React 那麼吃香，但也佔據了 5 成。&lt;/p&gt;

&lt;p&gt;而大家常常搞混的 AngularJS （ Angular的前身 ）只佔了 24 %，而且還榮登大家最討厭的框架之一：&lt;/p&gt;

&lt;p&gt;2020 年 StackOverflow 上，工程師最恨框架統計問卷:
&lt;img src=&quot;https://i.imgur.com/TXBF4t1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其實 Angular 跟 React 只差了 10% 而已，所以我們也可以說 Angular 其實是被 AngularJS 害慘了（因為大家常常分不清楚他們兩個）。&lt;/p&gt;

&lt;p&gt;那都說 React 比 Angular 好，那他到底好在哪裡？&lt;/p&gt;

&lt;p&gt;我們看下去！&lt;/p&gt;

&lt;h4 id=&quot;下集預告框架優缺點&quot;&gt;下集預告：框架優缺點…&lt;/h4&gt;

&lt;p&gt;市場趨勢講完了，我們終於要進入重頭戲框架優缺點，以及非常刺激的大對比。&lt;/p&gt;

&lt;p&gt;沒錯，接下來我會以以往寫過不同案子的功能舉例，同時撰寫 Angular + React 並分析他們的優缺點！&lt;/p&gt;

&lt;p&gt;我們下次見，掰掰~&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-vs-angular-part-2/</link>
        <guid isPermaLink="true">http://localhost:4000/react-vs-angular-part-2/</guid>
        
        <category>Angular 9</category>
        
        <category>React</category>
        
        <category>analysis</category>
        
        <category>observation</category>
        
        
        <category>Angular</category>
        
        <category>React</category>
        
        <category>front-end my love</category>
        
        <category>observation</category>
        
        <category>analysis notes</category>
        
        <category>trends</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>學習筆記：Angular 特色</title>
        <description>&lt;p&gt;學習筆記之Angular特色記載篇！！&lt;/p&gt;

&lt;h2 id=&quot;angular-特色&quot;&gt;Angular 特色&lt;/h2&gt;

&lt;p&gt;Angular 是 2016 年被推出的框架，一樣是 Google 開發的，可是兩者基本上是 Java 跟 JavaScript 的差別，基本上兩個不同的語言。&lt;/p&gt;

&lt;p&gt;Angular 採用 JS ES6 來開發，它主要由 8 個部分組成：&lt;/p&gt;

&lt;ol class=&quot;pl-4&quot;&gt;
&lt;li&gt;模塊 (Modules)&lt;/li&gt;
&lt;li&gt;組件 (Components)&lt;/li&gt;
&lt;li&gt;模板 (Templates)&lt;/li&gt;
&lt;li&gt;元數據 (Metadata)&lt;/li&gt;
&lt;li&gt;數據綁定 (Data Binding)&lt;/li&gt;
&lt;li&gt;指令 (Directives)&lt;/li&gt;
&lt;li&gt;服務 (Services)&lt;/li&gt;
&lt;li&gt;依賴注入 (Dependency Injection)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1. 模塊 (Modules)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;模塊，如名由一塊塊代碼組成，用來執行簡單任務。&lt;/p&gt;

&lt;p&gt;Angular 是模塊化的，有自己的模塊系統：NgModules。&lt;/p&gt;

&lt;p&gt;而每個 Angular 專案至少要有一個模塊(根模塊，所謂的 Root Module)，一般為：&lt;strong&gt;AppModule&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;Angular 模塊是一個帶有 &lt;strong&gt;@NgModule&lt;/strong&gt; 裝飾器的類，它接收一個用來描述模塊屬性的元數據對象。&lt;/p&gt;

&lt;p&gt;範例：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NgModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@angular/core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BrowserModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@angular/platform-browser'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;NgModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;imports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BrowserModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;declarations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bootstrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NgModule 裡面的屬性我就不一一講解了。&lt;/p&gt;

&lt;p&gt;創建完 AppModule 後，通過導入根模塊來啟動我們的專案，開發過程通常在 main.ts 裡面來 import AppModule。&lt;/p&gt;

&lt;p&gt;範例：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;platformBrowserDynamic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@angular/platform-browser-dynamic'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./app.module'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;platformBrowserDynamic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bootstrapModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AppModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2. 組件(Components)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Angular 核心，用來處理應用和邏輯頁面的 view，可用於整個專案。&lt;/p&gt;

&lt;p&gt;要創建 Component ，我們得從 @angular/core 中引入 Component 修飾器&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;'app-hero-list'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./hero-list.component.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HeroService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HeroListComponent&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnInit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* . . . */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3. 模板 (Templates)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;模板 = HTML view&lt;/p&gt;

&lt;p&gt;透過 component 裡面的 templateUrl 即可告知 Angular 如何顯示組件。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4.元數據 (Metadata)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Metadata 其實就是 Angular 用來將 class 定義成 component 的資訊。&lt;/p&gt;

&lt;p&gt;範例：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;'app-hero-list'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./hero-list.component.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HeroService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HeroListComponent&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OnInit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* . . . */&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;5. 數據綁定 (Data Binding)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;管理應用程式裡面數值的一種機制，可以從HTML裡面取值和賦值，使得數據的讀寫，數據的持久化操作變得更加簡單快捷。&lt;/p&gt;

&lt;p&gt;Angular 則有四種 data binding 模式。&lt;/p&gt;

&lt;p&gt;每種形式都有自己的一個方向：從 DOM 來、到 DOM 去、雙向&lt;/p&gt;

&lt;p&gt;我們看張圖：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/framework/dataBinding.jpg&quot; alt=&quot;dataBinding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;插值: 在 HTML 中顯示組件值。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;屬性綁定: 把元素的屬性設置為組件中屬性的值。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;userImageUrl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;事件綁定: 在組件方法名被點擊時觸發。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;onSave()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;雙向綁: 使用 Angular 里的 NgModel 指令進行雙向綁定。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;currentUser.firstName&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;currentUser.firstName=$event.target.value&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;6. 指令 (Directives)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;當 Angular 渲染模板時，它會根據指令對 DOM 進行修改。&lt;/p&gt;

&lt;p&gt;Angular 有三種類型的 directives:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;屬性指令：以元素的屬性形式來使用的指令。&lt;/li&gt;
  &lt;li&gt;結構指令：用來改變DOM樹的結構&lt;/li&gt;
  &lt;li&gt;組件：作為指令的一個重要子類，組件本質上可以看作是一個帶有模板的指令。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;範例：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ngFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;let book of books&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ngIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;selectedBook&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/book-info&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;*ngFor 告訴 Angular 為 books 列表中的每個項生成一個 &amp;lt;li&amp;gt; 標籤。&lt;/p&gt;

&lt;p&gt;*ngIf 表示只有在 selectedBook 等於 true 時，才會包含 book-info 組件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. 服務 (Services)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;服務是封裝了某一特定功能，並且可以通過注入的方式讓人使用的獨立模塊。&lt;/p&gt;

&lt;p&gt;服務有內建，也可自己撰寫。&lt;/p&gt;

&lt;p&gt;一個 service 的範例&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;export class BookListService {

  AddBook(book: BookModel) { console.log('added book:'${book}); }

  EditBook(book: BookModel) { console.warn('edited book:'${book}); }

  DeleteBook(book: BookModel) { console.error('deleted book:'${book}); }

}

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;8. 依賴注入 (Dependency Injection)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因為 DI 本身有太多可以講，故我們這邊就只提到 Service 的 DI。&lt;/p&gt;

&lt;p&gt;拿 Service 來說。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Injectable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'@angular/core'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Injectable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HeroService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;@Injectable()是angular的service使用做依賴注入的裝飾詞，可以使Service成為可被注入的元件。&lt;/p&gt;

&lt;p&gt;當我們在provider設定這個服務給這個module使用，如下：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;providers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;UserService&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接著我們就可以在整個專案中從constructor直接宣告這個服務，在所有地方取得的都會是同一個 service。&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HeroListComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;heroes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
 
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;heroService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HeroService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;heroes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;heroService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getHeroes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;當然還有很多功能，區區一小篇 blog post 講不完。&lt;/p&gt;

&lt;p&gt;就請各位至 Angular 官網慢慢啃食囉~&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/angular-highlight/</link>
        <guid isPermaLink="true">http://localhost:4000/angular-highlight/</guid>
        
        <category>Angular 9</category>
        
        <category>study</category>
        
        
        <category>Angular</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>React 跟 Angular 的框架分析 — Part 1: Angular 跟 React 的快速背景</title>
        <description>&lt;p&gt;歡迎來到&lt;strong&gt;小孩子才做選擇，我兩個都要！React 跟 Angular 的框架分析系列！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;這篇分析會切成以下四個部分，你現在在這裡：&lt;/p&gt;

&lt;ol class=&quot;pl-4&quot;&gt;
&lt;li&gt;&lt;span class=&quot;highlight-text&quot;&gt;&lt;strong&gt;Angular 跟 React 的快速背景&lt;/strong&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;快速帶過近幾年兩個框架的發展 trends （更詳細的 trends 分析會另外開一篇）&lt;/li&gt;
&lt;li&gt;兩個框架的優缺點，每提一點，會附上實作 comparison&lt;/li&gt;
&lt;li&gt;下集預告：配合後端 + 串起 API 後，誰勝出&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;準備好的話，我們就開始囉~&lt;/p&gt;

&lt;h2 id=&quot;關於-angular-跟-react&quot;&gt;關於 Angular 跟 React&lt;/h2&gt;

&lt;p&gt;我們先來聊聊 Angular。&lt;/p&gt;

&lt;p&gt;Angular，後面有 Google 爸爸撐腰的 JavaScript 框架。&lt;/p&gt;

&lt;p&gt;講到了 Angular 就必須聊聊 Angular 的前身： &lt;span class=&quot;highlight-text&quot;&gt;AngularJS&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;angularjs&quot;&gt;AngularJS&lt;/h4&gt;

&lt;p&gt;最早之前 Google 在 2010 年創建了 AngularJS （Angular 的前身），學習難度不低，但當時的確引發了很多話題。&lt;/p&gt;

&lt;p&gt;它最大賣點是可以透過 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 標籤添加到 HTML 頁面，AngularJS 通過這個指令擴展了HTML，並且通過表達式綁定數據到 HTML。&lt;/p&gt;

&lt;p&gt;而最大的特性則是：MVC、模塊化、自動化雙向數據綁定、語義化標籤、依賴注入等等。&lt;/p&gt;

&lt;p&gt;那為什麼我們要提到 AngularJS 咧？&lt;span class=&quot;highlight-text&quot;&gt;因為大家很容易搞混 AngularJS 跟 Angular 2+。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AngularJS&lt;/strong&gt; = 2010 年推出的舊框架，明年即將被 Google 冷藏，不再支援。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular 2+&lt;/strong&gt; （又或是我們在市場常看的 Angular 7, Angular 8… Angular 11 等） = &lt;strong&gt;2016&lt;/strong&gt; 年才推出的框架，是 AngularJS 的&lt;strong&gt;升級版&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;記住我們現在常常聽到的 Angular 7/Angular 8/ Angular 9 什麼的其實都是 Angular 2+ (第二代 Angular)，也是我們的主角。&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;而在這篇文章裡，我如果提到 Angular，就是在說 Angular 2+。&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;angular--特色&quot;&gt;Angular + 特色&lt;/h4&gt;

&lt;p&gt;Angular 是 2016 年被推出的框架，一樣是 Google 開發的，可是兩者基本上是 Java 跟 JavaScript 的差別，基本上兩個不同的語言。&lt;/p&gt;

&lt;p&gt;Angular 採用 JS ES6 來開發，它主要由 8 個部分組成：&lt;/p&gt;

&lt;ol class=&quot;pl-4&quot;&gt;
&lt;li&gt;模塊 (Modules)&lt;/li&gt;
&lt;li&gt;組件 (Components)&lt;/li&gt;
&lt;li&gt;模板 (Templates)&lt;/li&gt;
&lt;li&gt;元數據 (Metadata)&lt;/li&gt;
&lt;li&gt;數據綁定 (Data Binding)&lt;/li&gt;
&lt;li&gt;指令 (Directives)&lt;/li&gt;
&lt;li&gt;服務 (Services)&lt;/li&gt;
&lt;li&gt;依賴注入 (Dependency Injection)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;對這些部分有興趣的客官們，請移駕至這裡：&lt;a class=&quot;highlight-text&quot; href=&quot;/angular-highlight&quot;&gt;Angular 特色&lt;/a&gt;~&lt;/p&gt;

&lt;p&gt;這邊我們就不一一帶過了，畢竟這篇是在講 React 跟 Angular 的快速歷史。&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;React 部分重整中，待補上。&lt;/span&gt;&lt;/p&gt;

&lt;!-- ## 關於 React

React 是 Facebook 在 XX 年開發的 JavaScript Library。

#### React 特色



#### React VS Angular 特色 --&gt;

&lt;h4 id=&quot;下集預告關於市場趨勢&quot;&gt;下集預告：關於市場趨勢…&lt;/h4&gt;

&lt;p&gt;兩個前端框架歷史介紹的差不多了，那他們的市場趨勢又是如何呢？&lt;/p&gt;

&lt;p&gt;誰佔上風？誰比較好上手？又是誰默默崛起、誰被誤會？&lt;/p&gt;

&lt;p&gt;我們下次見~&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-vs-angular-part-1/</link>
        <guid isPermaLink="true">http://localhost:4000/react-vs-angular-part-1/</guid>
        
        <category>Angular 9</category>
        
        <category>React</category>
        
        <category>analysis</category>
        
        <category>observation</category>
        
        
        <category>Angular</category>
        
        <category>React</category>
        
        <category>front-end my love</category>
        
        <category>observation</category>
        
        <category>analysis notes</category>
        
        <category>trends</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>Build Custom Hooks</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;h2 id=&quot;what-is-react-hooks&quot;&gt;What is React Hooks?&lt;/h2&gt;

&lt;p&gt;They are functions that let us hooks into &lt;span class=&quot;highlight-text&quot;&gt;React state and lifecycle features&lt;/span&gt; from function components.&lt;/p&gt;

&lt;p&gt;Hooks reduces the complexity of state management. Redux is great for state management, but there are many steps in the process. Rather, hooks can be seen as a singular step. (More on this in a later post~)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why build our own custom hooks?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Building our own hooks lets us extract component logic into reusable functions.&lt;/p&gt;

&lt;p&gt;Sometimes, when we want to share logic between 2 JavaScript functions, we extract it to a third function.&lt;/p&gt;

&lt;p&gt;Since hooks and components are JS function, we can extract them as well.&lt;/p&gt;

&lt;h4 id=&quot;building-custom-hooks&quot;&gt;Building Custom Hooks&lt;/h4&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;A custom Hook is a JavaScript function whose name starts with “use” and that may call other Hooks.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Say we want to to see if our friends are online. But we also want to build a contact list that shows us who is online.&lt;/p&gt;

&lt;p&gt;So we can extract hook logic, and apply the hook into where the application needs the “friend status” logic.&lt;/p&gt;

&lt;p&gt;Here’s our custom hook that shows if a friend is online:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useFriendStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friendID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isOnline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setIsOnline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleStatusChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setIsOnline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isOnline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;ChatAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribeToFriendStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friendID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleStatusChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ChatAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsubscribeFromFriendStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friendID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleStatusChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isOnline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, say we want both &lt;span class=&quot;highlight-text&quot;&gt;Friend Status&lt;/span&gt; and &lt;span class=&quot;highlight-text&quot;&gt;Contact List&lt;/span&gt; to have the “friend status” logic.&lt;/p&gt;

&lt;p&gt;That would be…&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FriendStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isOnline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useFriendStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isOnline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Loading...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isOnline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Online'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Offline'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and contact list…&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ContactListItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isOnline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useFriendStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isOnline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'green'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'black'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;friend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Keep in Mind…&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We must use the prefix “use” in front of our hooks, so it doesn’t get confusing.&lt;/li&gt;
  &lt;li&gt;The states grabbed by hooks are &lt;span class=&quot;highlight-text&quot;&gt;completely isolated&lt;/span&gt; from one another. This means they don’t share the same state.&lt;/li&gt;
  &lt;li&gt;Each &lt;span class=&quot;highlight-text&quot;&gt;call&lt;/span&gt; to a Hook gets isolated state.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 21 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-11/</link>
        <guid isPermaLink="true">http://localhost:4000/react-11/</guid>
        
        <category>React</category>
        
        <category>React Hooks</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>Conditional Rendering</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;h2 id=&quot;conditional-rendering&quot;&gt;Conditional Rendering&lt;/h2&gt;

&lt;p&gt;Conditional Rendering = make things happen with certain conditions&lt;/p&gt;

&lt;p&gt;Common ways in React are…&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If..else statement&lt;/li&gt;
  &lt;li&gt;Element variables&lt;/li&gt;
  &lt;li&gt;Ternary operators&lt;/li&gt;
  &lt;li&gt;Logical &amp;amp;&amp;amp; operators&lt;/li&gt;
  &lt;li&gt;Prevent rendering with null&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ifelse&quot;&gt;If…else&lt;/h4&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLoggedIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; Logout &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; Login &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;element-variables&quot;&gt;Element Variables&lt;/h4&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLoggedIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; Logout &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; Login &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ternary-operators&quot;&gt;Ternary operators&lt;/h4&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;isLoggedIn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; Logout &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; Login &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;logical--operators&quot;&gt;Logical &amp;amp;&amp;amp; operators&lt;/h4&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;isLoggedIn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; Logout &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLoggedIn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; Login &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;prevent-rendering-with-null&quot;&gt;Prevent rendering with null&lt;/h4&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLoggedIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; Logout &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 20 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-10/</link>
        <guid isPermaLink="true">http://localhost:4000/react-10/</guid>
        
        <category>React</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>Event Handling</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;h2 id=&quot;handling-events&quot;&gt;Handling Events&lt;/h2&gt;

&lt;p&gt;Events are fired when user interacts with the application.&lt;/p&gt;

&lt;p&gt;Some examples in React are…&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;onclick&lt;/li&gt;
  &lt;li&gt;onchange&lt;/li&gt;
  &lt;li&gt;onfocus&lt;/li&gt;
  &lt;li&gt;onblur&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Handling events in React is very similar to handling events in DOM elements.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;But there are still some differences…&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/study-series/eventDifferences.png&quot; alt=&quot;useEffectHook&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;example-of-event-handling-in-functional-component&quot;&gt;Example of event handling in functional component&lt;/h4&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FunctionEventHandling&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'I am eating!!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Let's Eat!&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But why is it this:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Let&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'s Eat!&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and not this?&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Let&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'s Eat!&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Bc the event handling function should NOT be called with ().&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;It we call the handler with (), the function will be executed &lt;strong&gt;before&lt;/strong&gt; the button is clicked!!&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Event handler is a function not a function call!&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;example-of-event-handling-in-class-component&quot;&gt;Example of event handling in class component&lt;/h4&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;EatingToggle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;isEating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;isEating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isEating&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isEating&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'I am eating lah!'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Nope, not eating'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;`&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-09/</link>
        <guid isPermaLink="true">http://localhost:4000/react-09/</guid>
        
        <category>React</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>useEffect Hooks</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;h2 id=&quot;useeffect-hooks&quot;&gt;useEffect Hooks&lt;/h2&gt;

&lt;p&gt;Use this Hook to tell React what to do when the component needs to perform a task after rendering.&lt;/p&gt;

&lt;p&gt;Sample:
&lt;img src=&quot;/assets/images/study-series/useEffectHook.jpg&quot; alt=&quot;useEffectHook&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;This side effect will execute on every render including when the component has mounted and every time it updates.&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;lets-use-fetch-user-from-an-api-as-an-example&quot;&gt;Let’s use fetch user from an API as an example…&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;componentDidMount()&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// componentDidMount code goes here&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;fetchUserApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;setUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;^Bc we passed an empty array as the second parameter, the useEffect hook will only execute once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;componentDidUpdate(prevProps)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ComponentDidUpdate code goes here&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;fetchUserApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;setUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;^This effect will execute only once, when component is &lt;strong&gt;updated&lt;strong&gt; (includes re-rendering).&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;componentWillUnmount()&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// componentWillUnmount code goes here&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;All Three Combined&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;fetchUserApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;setUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 19 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-08/</link>
        <guid isPermaLink="true">http://localhost:4000/react-08/</guid>
        
        <category>React</category>
        
        <category>React Hooks</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>Component Lifecycle</title>
        <description>&lt;p&gt;短篇 React 學習筆記。&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;現在一大部分已被 useEffect Hook 取代，但是還是很有學習價值。&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;component-lifecycle&quot;&gt;Component Lifecycle&lt;/h2&gt;

&lt;p&gt;In each component, React has a lifecycle which you can monitor and manipulate during its 3 main phases.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/study-series/threephases.png&quot; alt=&quot;threephases&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;componentwillmount&quot;&gt;ComponentWillMount()&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Called &lt;strong&gt;once&lt;/strong&gt; in its component’s lifecycle&lt;/li&gt;
  &lt;li&gt;Called &lt;strong&gt;before&lt;/strong&gt; component render()&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;highlight-text&quot;&gt;Avoid any asynchronous behavior in this method&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;highlight-text&quot;&gt;setState won’t cause a re-render&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;componentdidmount&quot;&gt;ComponentDidMount()&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Called &lt;strong&gt;after&lt;/strong&gt; component render() once&lt;/li&gt;
  &lt;li&gt;Async function can be called here&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;highlight-text&quot;&gt;Call setState here for re-render&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;componentwillunmount&quot;&gt;ComponentWillUnmount()&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Called &lt;strong&gt;right before&lt;/strong&gt; component is removed from the DOM&lt;/li&gt;
  &lt;li&gt;Performs cleanups here. (i.e. cancel network call)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;componentwillupdate&quot;&gt;ComponentWillUpdate()&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Lets you manipulate component just before receiving new state/props.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;componentdidupdate&quot;&gt;ComponentDidUpdate()&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Called &lt;strong&gt;after&lt;/strong&gt; any rendered HTML has finished loading.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 19 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-07/</link>
        <guid isPermaLink="true">http://localhost:4000/react-07/</guid>
        
        <category>React</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
  </channel>
</rss>
