<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C's Notes</title>
    <description>一個追求使用者體驗前端工程師的學習筆記。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 17 Dec 2020 23:07:00 +0800</pubDate>
    <lastBuildDate>Thu, 17 Dec 2020 23:07:00 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>ES6</title>
        <description>&lt;h2 id=&quot;es6-for-react&quot;&gt;ES6 for React&lt;/h2&gt;

&lt;p&gt;JavaScript = a “dialect” of ECMAScript&lt;/p&gt;

&lt;p&gt;ES6 = ECMAScript 2015 = JavaScript standard.&lt;/p&gt;

&lt;p&gt;React uses ES6. ES6 is also getting popularity for writing server applications and services via Node.js.&lt;/p&gt;

&lt;h4 id=&quot;variables&quot;&gt;Variables&lt;/h4&gt;

&lt;p&gt;In ES6, variables are declared using &lt;span class=&quot;highlight-text&quot;&gt;const, let and var&lt;/span&gt; keywords.&lt;/p&gt;

&lt;p&gt;We cannot redeclare &lt;strong&gt;const&lt;/strong&gt; or &lt;strong&gt;let&lt;/strong&gt; variables.&lt;/p&gt;

&lt;p&gt;And, we can only update &lt;strong&gt;let&lt;/strong&gt; variable.&lt;/p&gt;

&lt;h4 id=&quot;block-scope-vs-function-scope&quot;&gt;Block Scope vs Function Scope&lt;/h4&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;var&lt;/span&gt; is global scope. It can be accessed everywhere.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;let&lt;/span&gt; is a block scope. It can only be accessed inside the block where it is defined.&lt;/p&gt;

&lt;h4 id=&quot;new-update-arrow-function--regular-function&quot;&gt;New Update: Arrow Function &amp;amp; Regular Function&lt;/h4&gt;

&lt;p&gt;Regular Function&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;var hello = function(name) { 
  return name
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ES6 Arrow function&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let hello = (name) =&amp;gt; { return name }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even more ways to define arrow functions…&lt;/p&gt;

&lt;p&gt;We can omit {}, if there’s only one expression&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let hello = (num1, num2) =&amp;gt; num1 + num2;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can omit (), if there’s only one argument&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let hello = name =&amp;gt; name;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can use _, if there’s no argument&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let hello = _ =&amp;gt; 1 + 2;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;this-keyword&quot;&gt;this keyword&lt;/h4&gt;

&lt;p&gt;In regular function, the &lt;strong&gt;this&lt;/strong&gt; keyword represents the object called inside a function.&lt;/p&gt;

&lt;p&gt;In arrow function, the &lt;strong&gt;this&lt;/strong&gt; keyword represents the object that defined the function, which is the window. object.&lt;/p&gt;

&lt;h4 id=&quot;template-literals&quot;&gt;Template Literals&lt;/h4&gt;

&lt;p&gt;Quoted between ``, string literals that can include expressions. Like this…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let name = 'Boop';
let greeting = `Hello, ${name}`;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;destructuring-arrays&quot;&gt;Destructuring: Arrays&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let array = [1,2,3,4,5];
let [value1,value2,value3] = array;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;this is equivalent to&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let array = [1,2,3,4,5];
let value1 = array[0];
let value2 = array[1];
let value3 = array[2];
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;destructuring-objects&quot;&gt;Destructuring: Objects&lt;/h4&gt;

&lt;p&gt;Similar to destructuring array…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let obj = {
  key1: 'boop',
  key2: 'foo',
  key3: 'bar'
};
let [key1,key2,key3] = obj;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;spread-operator&quot;&gt;Spread Operator&lt;/h4&gt;

&lt;p&gt;The spread operator spreads the values in an iterable, such as array &amp;amp; strings, across arguments or elements.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let fruits = ['apples','bananas','strawberry'];
let veggies = ['cabbage','asparagus','green onions'];

let grocery = [...fruits,...veggies];
console.log(grocery);
// ['apples','bananas','strawberry','cabbage','asparagus','green onions']
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spread operator can also be used to clone an array &amp;amp; objects in an arrow function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;const dog1 = {
  name: 'Boop',
  breed: 'Corgi'
}

const dog2 = {...dog1}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rest-parameter&quot;&gt;Rest Parameter&lt;/h4&gt;

&lt;p&gt;This is used to pass an arbitrary number of argument, and to process these args within the arrow function.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Rest parameters are array instances.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;We use rest parameters if we need extra parameters other than the specified ones.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;let foo = function(a, b, ...args) {
  console.log(args);
}

foo(1,2); // [], nothing will print inside the array, because we don't have extra parameters

foo(1,2,3,4,5) // [3,4,5]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;Difference between rest parameter and normal arguments&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Rest parameters returns an &lt;span class=&quot;highlight-text&quot;&gt;array&lt;/span&gt; by default, so methods like &lt;strong&gt;map, sort, shift, forEach…&lt;/strong&gt; can be used directly. But for normal args, they need to be converted into an array because normal args are &lt;span class=&quot;highlight-text&quot;&gt;objects&lt;/span&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-02/</link>
        <guid isPermaLink="true">http://localhost:4000/react-02/</guid>
        
        <category>React</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>Intro to React</title>
        <description>&lt;h2 id=&quot;intro-to-react&quot;&gt;Intro to React&lt;/h2&gt;

&lt;p&gt;React = JS library for building user interfaces or UI components.&lt;/p&gt;

&lt;h4 id=&quot;features&quot;&gt;Features&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;JSX - JavaScript Syntax Extension&lt;/li&gt;
  &lt;li&gt;Virtual DOM&lt;/li&gt;
  &lt;li&gt;One way data binding&lt;/li&gt;
  &lt;li&gt;Extensions&lt;/li&gt;
  &lt;li&gt;Debugging&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;advantages--limitations&quot;&gt;Advantages &amp;amp; Limitations&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Virtual DOM&lt;/strong&gt;: React uses virtual DOM which is a JS object. This will improve apps performance, since JS virtual DOM is faster than regular DOM. 
&lt;strong&gt;Usability&lt;/strong&gt;:React can be used on client and server sides as well as with other frameworks (i.e. NativeScript).
&lt;strong&gt;Maintenance&lt;/strong&gt;:Component and data patterns improve readability, which helps to maintain larger apps.&lt;/p&gt;

&lt;p&gt;But React covers only the view part of the app. So to complete the entire development we would have to choose other technologies.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/react-01/</link>
        <guid isPermaLink="true">http://localhost:4000/react-01/</guid>
        
        <category>React</category>
        
        <category>JS Fundamentals</category>
        
        
        <category>React</category>
        
        <category>Fundamentals</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
      <item>
        <title>前端也可以寫手機 app ? 神奇的框架: NativeScript</title>
        <description>&lt;p&gt;「魔鏡啊，魔鏡，什麼東西可以讓我寫一次就產生蘋果和安卓的 app？」&lt;/p&gt;

&lt;p&gt;「…哈囉？魔鏡？」&lt;/p&gt;

&lt;p&gt;呃，好，不玩了，我們直接進主題。&lt;/p&gt;

&lt;h4 id=&quot;首先我們先來聊聊前端跟手機-app-這個話題&quot;&gt;首先，我們先來聊聊前端跟手機 app 這個話題&lt;/h4&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;&lt;del&gt;這個 section 廢話很多，歡迎你跳過&lt;/del&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;在人人一台手機，以及只會寫 static site 就直接被淘汰的年代（哈囉，2004!），我們前端每年也有越來越多好玩的新玩具，任君挑選。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ns/1.png&quot; alt=&quot;frameworks&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;是的，華生&lt;/strong&gt;，在前端框架年年出、年年更新的盛況下，現在前端寫的已經不是靜態網站了，我們基本上都在寫 web app ，配合可愛的後端隊友，一個個網頁版的 start up 服務就這樣被孵化出來。&lt;/p&gt;

&lt;p&gt;那網頁版的都出來了，為什麼不寫&lt;strong&gt;手機 app &lt;/strong&gt;呢？&lt;/p&gt;

&lt;p&gt;&lt;del&gt;呃，因為我是前端我不會（喂&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;因為寫手機 app 真的是個學問，每個平台都有自己的寫法、規範，除此之外還得學習不同的語言才寫的出來，寫的出來還只是基礎，還要畫面好看、功能好用、效能夠快。&lt;/p&gt;

&lt;p&gt;喔，對了，還要 UI/UX 好用哦，啾咪。&lt;/p&gt;

&lt;p&gt;不過，話說回來，各種 app 不就是這樣嘛，哈哈。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ns/2.jpg&quot; alt=&quot;phone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BUT&lt;/strong&gt;，沒錯，就是這個 BUT 他出現了，我是前端就不能寫手機 app 嘛？ 我也想寫啊，可是因為（以下省略幾十行理由）我無法。&lt;/p&gt;

&lt;p&gt;沒關係，這時候我們的心聲被聽到了（耶~&lt;/p&gt;

&lt;p&gt;我們現在有種神奇的科技，主張只要寫一次 code 就可以產出雙平台 apps，那就是 hybrid apps！&lt;/p&gt;

&lt;p&gt;關於 hybrid apps ，我們之後會細說，我們先來聊聊今天的主角（也是 hybrid apps 之一的）: &lt;span class=&quot;highlight-text&quot;&gt;NativeScript!&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ns/3.png&quot; alt=&quot;ns&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;原理&quot;&gt;原理&lt;/h4&gt;

&lt;p&gt;所以 NativeScript 到底是什麼東東？&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;以下為了方便起見，我會直接將 Native Script 縮寫成 NS。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;簡單來說，它就是個可以寫原生 &lt;strong&gt;iOS&lt;/strong&gt; 跟 &lt;strong&gt;Android app&lt;/strong&gt; 的 &lt;strong&gt;JavaScript Framework&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;它不僅是 Open Source，也有著偉大的理想，就是讓工程師可以寫一次，就哪裡（ iOS + Android ）都可以用的框架（當然這是夢想，跟實際還是有很大的差別，不過夠接近了啦~）&lt;/p&gt;

&lt;p&gt;那我們需要會什麼語言才能寫它咧？&lt;/p&gt;

&lt;p&gt;NS 的好處是它有多種寫法可以選擇，前端三大框架霸主都可以：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;React&lt;/li&gt;
  &lt;li&gt;Angular&lt;/li&gt;
  &lt;li&gt;Vue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那泥，你不會？不想寫？ 沒關係，它還可以用最單純寫法：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Vanilla JavaScript&lt;/li&gt;
  &lt;li&gt;TypeScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然後，重頭戲來了！&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;NS 最大特點就是可以存取原生（Native） iOS 跟 Android 的 classes！&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;可是為什麼他可以寫原生 app，他不是用 JavaScript嗎？而 Native 又是什麼鬼？&lt;/p&gt;

&lt;p&gt;這個跟 NS 的結構有關，我們往下看。&lt;/p&gt;

&lt;h4 id=&quot;結構&quot;&gt;結構&lt;/h4&gt;

&lt;p&gt;所以他到底是怎麼讓雙平台 apps 跑起來的 &amp;amp; 他到底用了什麼?&lt;/p&gt;

&lt;p&gt;我們先來看看這個圖:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ns/4.png&quot; alt=&quot;ns&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NS 是用了來自 Google 的 JavaScript V8 virtual machine、Runtime &amp;amp; bridge module 組建而成。&lt;/p&gt;

&lt;p&gt;那他們都在幹嘛咧？我們快速看一下圖，對照下面的工作列表：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Virtual machine 負責翻譯 + 執行 JS code&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bridge Module&lt;/strong&gt; 負責翻譯呼叫原生手機的 API call，並把結果回傳，&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NS Runtimes&lt;/strong&gt; 讓你可以用 JavaScript 呼叫 Android 跟 iOS 框架的 API&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NS Core modules&lt;/strong&gt; 會幫你創建個 API ，把你的 JS 程式碼翻譯成原生平台可用的程式碼&lt;/li&gt;
  &lt;li&gt;&lt;span class=&quot;highlight-text&quot;&gt;NativeScript CLI 就是你要寫 app 的平台&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;NativeScript 插件&lt;strong&gt;（{N} Plugins）&lt;/strong&gt;，是整個 NS 的核心&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;簡單來說&lt;/strong&gt;：
因為可以使用 API call 就能操控手機功能，所以 NS 可以讓你直接用 JavaScript （不需要會 Objective-C 或 Java ）寫出手機 app。&lt;/p&gt;

&lt;p&gt;它可以讓你直接用 JS 就可以寫手機才有的功能！（就好比拍照啦、查看聯絡人啦、打電話…etc）&lt;/p&gt;

&lt;h4 id=&quot;那我們能怎麼寫呢&quot;&gt;那我們能怎麼寫呢？&lt;/h4&gt;

&lt;p&gt;說到這，可能很多朋友不確定 NS 是不是適合自己。&lt;/p&gt;

&lt;p&gt;沒關係，我們有個試水溫的好方法，那就是 NS 官方推出的線上 Web IDE - &lt;strong&gt;NativeScript Playground！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;highlight-text&quot; href=&quot;https://play.nativescript.org/&quot; target=&quot;_blank&quot;&gt;NS Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ns/5.png&quot; alt=&quot;playground&quot; /&gt;&lt;/p&gt;

&lt;p&gt;只要下載官方推出的兩個 app， preview 跟 playground 即可線上編寫手機 app ，live 測試（很酷吧！&lt;/p&gt;

&lt;p&gt;而試水溫過，覺得 NS 好像還可以，就可以直接下載 Local Machine CLI 寫起來！&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;highlight-text&quot; href=&quot;https://docs.nativescript.org/start/quick-setup#full-setup&quot; target=&quot;_blank&quot;&gt;Full Setup Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;因為 setup 太繁雜，就不帶大家一步步過了，請自行移步樓上鏈接處理 setup。&lt;/p&gt;

&lt;p&gt;講完了 setup，我們接著來看看 NS 是怎麼產生 UI Layout 的。&lt;/p&gt;

&lt;h4 id=&quot;nativescript-的-ui-layout&quot;&gt;NativeScript 的 UI Layout&lt;/h4&gt;

&lt;p&gt;我們先看這張圖：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ns/6.png&quot; alt=&quot;uiLayout&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NS 其實有一套類似 XML 的 UI 寫法，拿大家最熟悉的按鈕來說，一個按鈕就是:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;Button (tap)=&quot;onTap()&quot; class=&quot;btn-primary&quot; /&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再配合 CSS、 ScSS 的結合，就可以把 UI 繪製出來！&lt;/p&gt;

&lt;p&gt;可是，我們總不可能整個 app 都要自己寫吧？ 對，這個時候我們就要開始來聊聊 NS 的缺點，跟如何找資源了（抱大神大腿&lt;/p&gt;

&lt;h4 id=&quot;nativescript-插件-主要結構之一&quot;&gt;NativeScript 插件 （主要結構之一）&lt;/h4&gt;

&lt;p&gt;之前稍稍提到的 NS 本身也是靠插件堆起來的，包括主要核心 NativeScript Core，那 NS 官方的工程師有沒有釋放出資源給我們用呢？&lt;/p&gt;

&lt;p&gt;要說有嗎，其實並沒有，很多東西都得自己手寫，但是還是有啦。&lt;/p&gt;

&lt;p&gt;我們的 NS MarketPlace ( NS 市集 )&lt;/p&gt;

&lt;p&gt;可是 NativeScript 實在是太冷門了，所以很多東西都沒有 up to date，都得自己創建，但還是有差不多&lt;strong&gt; 1563&lt;/strong&gt; 個插件。&lt;/p&gt;

&lt;p&gt;不過 2014 年被創建後，只有&lt;strong&gt; 16&lt;/strong&gt; 個是被官方認證的插件，而半年內有更新的插件也只有&lt;strong&gt; 71&lt;/strong&gt; 個。&lt;/p&gt;

&lt;p&gt;嗯哼，你沒看錯，我們來聊聊 NS 的缺點吧。&lt;/p&gt;

&lt;h4 id=&quot;nativescript--hybrid-apps-缺點&quot;&gt;NativeScript &amp;amp; Hybrid Apps 缺點&lt;/h4&gt;

&lt;p&gt;在開始前，我們先說說 Native vs Hybrid Apps。&lt;/p&gt;

&lt;p&gt;我們看這個圖：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ns/7.png&quot; alt=&quot;appComp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Native Apps&lt;/strong&gt; = &lt;strong&gt;原生語言&lt;/strong&gt;程式寫的 app，就是所謂的用&lt;strong&gt; Java &lt;/strong&gt;寫的 Android app 或&lt;strong&gt; Objective-C/Swift &lt;/strong&gt;寫的 iOS app。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hybrid Apps&lt;/strong&gt; = &lt;strong&gt;混合語言&lt;/strong&gt;程式寫的 app，就是前端三寶 &lt;strong&gt;(HTML/CSS/JS)&lt;/strong&gt; 寫的，寫好的這些 code 會被裝進原生容器 &lt;strong&gt;(Native Container) &lt;/strong&gt;，透過手機上的瀏覽器引擎來呈現和執行&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;但是，其實 hybrid apps 跟實際 native apps 開發還是有差別的！&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;為什麼? &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因為 NS、React Native 這些 hybrid apps 相較於 native apps，還是有做不到的 &lt;strong&gt;10-20%&lt;/strong&gt;。拿 React Native 來說，就是那些在 Facebook 的工程師不願意寫出來的那些複雜功能。（&lt;del&gt;請去追殺這群傢伙&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;接著，我們來說 hybrid app 的&lt;span class=&quot;highlight-text&quot;&gt;性能&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Hybrid Apps 依靠手機的瀏覽器速度 (假設我們用 Ionic 這個框架)，也就表示它基本上不可能像 native apps 那麼快。&lt;/p&gt;

&lt;p&gt;那這和 NS 有什麼關係？&lt;/p&gt;

&lt;p&gt;因為 NS 也是 hybrid apps，所以它啟動的 loading 時間，基本上就是等待 Windows 95 電腦啟動，功能也是，而且 app 越大越慢。&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;非常小的討論社群&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;剛剛在講 plugins 的時候有提到。&lt;/p&gt;

&lt;p&gt;NS 剛出來時，已經被大多數想寫 mobile 的工程師淘汰（那時 React &amp;amp; React Native 都崛起啊，加上 NS 又複雜，當時也不支援 React…&lt;/p&gt;

&lt;p&gt;所以基本上想寫 hybrid apps 都跑去寫 React Native，NS 根本沒人寫。&lt;/p&gt;

&lt;h4 id=&quot;hybrid-apps-框架大亂鬥&quot;&gt;Hybrid Apps 框架大亂鬥&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ns/8.png&quot; alt=&quot;chart&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這是之前研究框架是搜集出來的結果，不用一個字一個字查。&lt;/p&gt;

&lt;p&gt;我直接以因為專案需求使用 NS 的主要工程師角色，很負責的用一句話帶過：&lt;span class=&quot;highlight-text&quot;&gt;珍惜生命，遠離 NativeScript。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;好啦，也不能這麼混，我還是總結一下這個表單：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;社團小、開發者也少、開發難度也不低，很多東西要自己寫&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;那，一直提到的社團小、開發者也少、開發難度也不低，NativeScript 到底有什麼能贏的過其他兩位的呢？&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;highlight-text&quot;&gt;第一點 Access to Native API。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;NS 最大的賣點就是他可以直接呼叫 API，讓我們用寫 JS 的方法寫手機 app ，做到打電話、拍照、查看聯絡人的功能，可是 React Native 也可以啊，React Native 有 Native Module 不是嗎？&lt;/p&gt;

&lt;p&gt;對，可是相較於 Ionic 的話，NS 還是佔上風的，因為 Ionic 不支援手機 Native 的功能。&lt;/p&gt;

&lt;p&gt;好吧，那這樣我們用 React Native，不就好了嗎？&lt;/p&gt;

&lt;p&gt;我們來看看第二點，&lt;span class=&quot;highlight-text&quot;&gt;不限制於 React&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;記得最開始我們有講到嗎？ NS 有5種不同的寫法，不會 React 還是可以寫！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NS 可以寫 Angular、Vue、React、JavaScript &amp;amp; TypeScript&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（而我這個目前還在啃食 React 資訊、又因公司專案需求的工程師就這樣入了 NS 的坑）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;那重點來了…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Native Script 的缺點那麼多，為什麼我還會從零學起，並用 NativeScript 寫手機 app 呢？&lt;/p&gt;

&lt;p&gt;嗯，很簡單。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;因為客戶要求。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ns/9.png&quot; alt=&quot;shiba&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;其實，我還想私心跟大家 demo 一下 NS 的功能，可是礙於公司產品不可以 showcase，我之後再奉上一小段其他 side project app 的迷你 demo 吧， 請敬請期待。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;謝謝各位的閱讀。&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;references&quot;&gt;References&lt;/h4&gt;
&lt;p&gt;&lt;small&gt;https://dev.to/ronakpatel70/nativescript-v-s-react-native-what-to-choose-for-cross-platform-app-development-d20
https://tylerablake.github.io/nativescript-intro/
https://buzzorange.com/techorange/2013/11/28/native-app-or-hybrid/
https://insights.daffodilsw.com/blog/nativescript-vs-react-native-overview-and-comparison
https://blog.jscrambler.com/react-native-vs-ionic-vs-nativescript-a-practical-guide/
https://blog.jscrambler.com/introduction-to-nativescript/
https://www.quora.com/What-are-the-bad-sides-if-I-build-an-app-for-iOS-and-Android-using-NativeScript-and-Angular-compared-to-native-apps
https://nativescript.org/faq/how-does-nativescript-work/
https://www.quora.com/Has-anyone-built-a-project-with-NativeScript-or-React-Native-and-which-seems-to-have-the-upper-hand
https://www.quora.com/Should-I-explore-iOS-development-along-with-my-hybrid-knowledge-and-experience-with-Angular-Ionic-and-NativeScript-Will-it-be-worth-my-time
https://www.itread01.com/content/1544417462.html
&lt;/small&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/hello-native-script/</link>
        <guid isPermaLink="true">http://localhost:4000/hello-native-script/</guid>
        
        <category>Angular 9</category>
        
        <category>NativeScript</category>
        
        <category>Mobile App Development</category>
        
        
        <category>Angular</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
        <category>mobile development</category>
        
      </item>
    
      <item>
        <title>今年黑五不購物，讀書去~</title>
        <description>&lt;p&gt;那個去年黑五在打LoL、吃牛排的 Angular 工程師，今年怎麼開始學 React.js 啦？&lt;/p&gt;

&lt;h4 id=&quot;今年黑五不購物讀書去&quot;&gt;今年黑五不購物，讀書去~&lt;/h4&gt;

&lt;p&gt;如題，去年的黑五我在打LoL、吃牛排，今年的我，不一樣了！我讀書。&lt;/p&gt;

&lt;p&gt;我是一個平凡的 Angular 工程師，直到在誠品看到了一本 React.js 的教學書。於是，我變成了一個，會一點點 React.js 的前端工程師。&lt;/p&gt;

&lt;p&gt;這週的星期五就是黑色星期五了，黑色星期五想必是要大大的購物一番，不過，因為我買到了這本書，我便一頭栽進去 React.js 的世界。&lt;/p&gt;

&lt;p&gt;今年的黑五，都在看書和寫扣。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/react/1.jpg&quot; alt=&quot;book&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;在這一週我學會了--花費時間&quot;&gt;在這一週，我學會了 + 花費時間&lt;/h4&gt;
&lt;p&gt;這一週每天約花五個小時念這本書，因為我的中文程度只有小學四年級。所以我需要花費大量時間理解 Concept，轉成英文確保自己理解後，再繼續實作。&lt;/p&gt;

&lt;p&gt;於是他變成了這樣：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/react/2.jpg&quot; alt=&quot;readBook&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下來的週末兩天，星期五花了 7 小時，星期六花了 5 小時，於是，新版的履歷就生出來囉！&lt;/p&gt;

&lt;p&gt;之前我的履歷長這樣
&lt;img src=&quot;/assets/images/react/3.png&quot; alt=&quot;origResume&quot; /&gt;&lt;/p&gt;

&lt;p&gt;現在的履歷，登登！
&lt;img src=&quot;/assets/images/react/4.jpg&quot; alt=&quot;newResume&quot; /&gt;&lt;/p&gt;

&lt;p&gt;RWD 也沒有問題！
&lt;img src=&quot;/assets/images/react/5.png&quot; alt=&quot;newResumeRWD&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用技術：React.js, React Hooks&lt;/p&gt;

&lt;p&gt;欸，對，他上線了，在這裡: &lt;a class=&quot;highlighter&quot; href=&quot;https://chiaweiwu.github.io/resume&quot;&gt;resume&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Nov 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/hello-react/</link>
        <guid isPermaLink="true">http://localhost:4000/hello-react/</guid>
        
        <category>React</category>
        
        <category>React Hooks</category>
        
        
        <category>React</category>
        
        <category>front-end my love</category>
        
        <category>study notes</category>
        
        <category>new framework!</category>
        
      </item>
    
  </channel>
</rss>
